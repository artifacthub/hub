{
  ".Capabilities.APIVersions.Has": "# .Capabilities.APIVersions.Has function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#capabilitiesapiversionshas)\nReturns if an API version or resource is available in a cluster.",
  "abbrev": "# abbrev function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#abbrev)\nTruncate a string with ellipses.",
  "abbrevboth": "# abbrevboth function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#abbrevboth)\nAbbreviate both sides.",
  "add": "# add function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#add)\nSum numbers with add. Accepts two or more inputs.",
  "add1": "# add1 function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#add1)\nThis function increments by 1.",
  "adler32sum": "# adler32sum function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#adler32sum)\nThe adler32sum function receives a string, and computes its **Adler-32 checksum**.",
  "ago": "# ago function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ago)\nThe ago function returns **duration from time**. Now in seconds resolution.",
  "and": "# and function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#and)\nReturns a boolean **and** of the two arguments.",
  "append": "# append function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#append-mustappend)\nAppend a new item to an existing list, creating a new list. This function panics if there is a problem.",
  "atoi": "# atoi function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-conversion-functions)\nConvert a string to an integer.",
  "b32dec": "# b32dec function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#encoding-functions)\nThis function **decodes** with Base32.",
  "b32enc": "# b32enc function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#encoding-functions)\nThis function **encodes** with Base32.",
  "b64dec": "# b64dec function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#encoding-functions)\nThis function **decodes** with Base64.",
  "b64enc": "# b64enc function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#encoding-functions)\nThis function **encodes** with Base64.",
  "base": "# base function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#base)\nReturn the last element of a path.",
  "buildCustomCert": "# buildCustomCert function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#buildcustomcert)\nThe buildCustomCert function allows customizing the certificate.",
  "camelcase": "# camelcase function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#camelcase)\nConvert string from snake_case to **CamelCase**.",
  "cat": "# cat function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#cat)\nThe cat function concatenates multiple strings together into one, separating them with spaces.",
  "ceil": "# ceil function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ceil)\nReturns the greatest float value greater than or equal to input value.",
  "clean": "# clean function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#clean)\nClean up a path.",
  "coalesce": "# coalesce function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#coalesce)\nThe **coalesce** function takes a list of values and returns the first non-empty one.",
  "compact": "# compact function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#compact-mustcompact)\nAccepts a list and removes entries with empty values. This function panics if there is a problem.",
  "concat": "# concat function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#concat)\nConcatenate arbitrary number of lists into one.",
  "contains": "# contains function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#contains)\nTest to see if one string is contained inside of another.",
  "date": "# date function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#date)\nThe date function **formats a date**.",
  "dateInZone": "# dateInZone function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#dateinzone)\nThe dateInZone function **formats a date** with a **timezone**.",
  "dateModify": "# dateModify function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#datemodify-mustdatemodify)\nThe dateModify takes a modification and a date and returns the **timestamp**. If the modification format is wrong, this function will return the date unmodified.",
  "decryptAES": "# decryptAES function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#decryptaes)\nThe decryptAES function receives a base64 string encoded by the **AES-256 CBC** algorithm and returns the decoded text.",
  "deepCopy": "# deepCopy function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#deepcopy-mustdeepcopy)\nThe deepCopy function takes a value and makes a deep copy of the value. This includes dicts and other structures. This function panics when there is a problem.",
  "deepEqual": "# deepEqual function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#deepequal)\nThe deepEqual function returns true if two values are **\"deeply equal\"**. Works for non-primitive types as well (compared to the built-in eq).",
  "default": "# default function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#default)\nTo set a simple **default** value.",
  "derivePassword": "# derivePassword function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#derivepassword)\nThe derivePassword function can be used to derive a specific password based on some shared **\"master password\"** constraints. The algorithm for this is well specified.",
  "dict": "# dict function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#dict)\nCreating **dictionaries** is done by calling the dict function and passing it a list of pairs.",
  "dir": "# dir function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#dir)\nReturn the directory, stripping the last part of the path.",
  "div": "# div function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#div)\nPerform integer division with div.",
  "duration": "# duration function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#duration)\nFormats a given amount of seconds as a **time**.",
  "durationRound": "# durationRound function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#durationround)\nRounds a given duration to the **most significant unit**. Strings and time.",
  "empty": "# empty function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#empty)\nThe **empty** function returns true if the given value is considered empty, and false otherwise. The empty values are listed in the default section.",
  "encryptAES": "# encryptAES function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#encryptaes)\nThe encryptAES function encrypts text with **AES-256 CBC** and returns a base64 encoded string.",
  "eq": "# eq function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#eq)\nReturns the boolean **equality** of the arguments.",
  "ext": "# ext function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ext)\nReturn the file extension.",
  "fail": "# fail function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#fail)\nUnconditionally returns an empty string and an error with the specified text. This is useful in scenarios where other conditionals have determined that template rendering should **fail**.",
  "first": "# first function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#first-mustfirst)\nGet the **head item** on a list. This function panics if there is a problem.",
  "float64": "# float64 function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-conversion-functions)\nConvert to a float64.",
  "floor": "# floor function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#floor)\nReturns the greatest float value less than or equal to input value.",
  "ge": "# ge function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ge)\nReturns a boolean true if the first argument is greater than or equal to the second. False is returned otherwise.",
  "genCA": "# genCA function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#genca)\nThe genCA function generates a new, self-signed x509 certificate authority.",
  "genPrivateKey": "# genPrivateKey function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#genprivatekey)\nThe genPrivateKey function generates a new private key encoded into a PEM block.",
  "genSelfSignedCert": "# genSelfSignedCert function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#genselfsignedcert)\nThe genSelfSignedCert function generates a new, self-signed x509 certificate.",
  "genSignedCert": "# genSignedCert function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#gensignedcert)\nThe genSignedCert function generates a new, x509 certificate signed by the specified CA.",
  "get": "# get function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#get)\nGiven a map and a key, **get the value** from the map.",
  "getHostByName": "# getHostByName function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#network-functions)\nThe getHostByName receives a domain name and returns the **ip address**.",
  "gt": "# gt function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#gt)\nReturns a boolean true if the first argument is **greater than** the second. False is returned otherwise.",
  "has": "# has function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#has-musthas)\nTest to see if a list has a particular element. This function panics if there is a problem.",
  "hasKey": "# hasKey function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#haskey)\nThe hasKey function returns true if the given dict **contains** the given key.",
  "hasPrefix": "# hasPrefix function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#hasprefix-and-hassuffix)\nTest whether a string has a given **prefix**.",
  "hasSuffix": "# hasSuffix function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#hasprefix-and-hassuffix)\nTest whether a string has a given **suffix**.",
  "htmlDate": "# htmlDate function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#htmldate)\nThe htmlDate function formats a date for inserting into an **HTML date picker input field**.",
  "htmlDateInZone": "# htmlDateInZone function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#htmldateinzone)\nThe htmlDateInZone function formats a date for inserting into an **HTML date picker input field** with a **timezone**.",
  "htpasswd": "# htpasswd function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#htpasswd)\nThe htpasswd function takes a username and password and generates a **bcrypt hash of the password**. The result can be used for basic authentication on an Apache HTTP Server.",
  "indent": "# indent function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#indent)\nThe **indent** function indents every line in a given string to the specified indent width. This is useful when aligning multi-line strings.",
  "initial": "# initial function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#initial-mustinitial)\nThe initial function compliments last by returning all but the last element. This function panics if there is a problem.",
  "int": "# int function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-conversion-functions)\nConvert to an int at the system's width.",
  "int64": "# int64 function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-conversion-functions)\nConvert to an int64.",
  "isAbs": "# isAbs function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#isabs)\nThis function checks whether a file path is absolute.",
  "kebabcase": "# kebabcase function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#kebabcase)\nConvert string from camelCase to **kebab-case**.",
  "keys": "# keys function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#keys)\nThe keys function will return a list of all of the keys in one or more dict types. Since a dictionary is unordered, the keys will not be in a predictable order. They can be sorted with sortAlpha.",
  "kindIs": "# kindIs function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#kind-functions)\nThe kindIs function will let you verify that a value is a particular kind.",
  "kindOf": "# kindOf function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#kind-functions)\nThe kindOf function returns the kind of an object.",
  "last": "# last function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#last-mustlast)\nGet the **last item** on a list. This function panics if there is a problem.",
  "le": "# le function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#le)\nReturns a boolean true if the first argument is **less than or equal** to the second. False is returned otherwise.",
  "len": "# len function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#len)\nReturns the length of the argument as an integer.",
  "lookup": "# lookup function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#lookup)\nThe lookup function is used to look up resource in a running cluster. When used with the helm template command it always returns an empty response.",
  "lower": "# lower function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#lower)\nConvert the entire string to **lowercase**.",
  "lt": "# lt function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#lt)\nReturns a boolean true if the first argument is **less than** the second. False is returned otherwise.",
  "max": "# max function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#max)\nReturn the largest of a series of integers.",
  "merge": "# merge function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#merge-mustmerge)\nMerge two or more dictionaries into one, giving precedence to the dest dictionary.",
  "mergeOverwrite": "# mergeOverwrite function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#mergeoverwrite-mustmergeoverwrite)\nMerge two or more dictionaries into one, giving precedence from right to left, effectively overwriting values in the dest dictionary.",
  "min": "# min function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#min)\nReturn the smallest of a series of integers.",
  "mod": "# mod function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#mod)\nGet modulo.",
  "mul": "# mul function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#mul)\nMultiply with this function. Accepts two or more inputs.",
  "mustAppend": "# mustAppend function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#append-mustappend)\nAppend a new item to an existing list, creating a new list. This function returns an error to the template engine if there is a problem.",
  "mustCompact": "# mustCompact function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#compact-mustcompact)\nAccepts a list and removes entries with empty values. This function returns an error to the template engine if there is a problem.",
  "mustDateModify": "# mustDateModify function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#datemodify-mustdatemodify)\nThe mustDateModify takes a modification and a date and returns the **timestamp**. If the modification format is wrong, this function will return an error.",
  "mustDeepCopy": "# mustDeepCopy function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#deepcopy-mustdeepcopy)\nThe mustDeepCopy function takes a value and makes a deep copy of the value. This includes dicts and other structures. This function returns an error to the template system when there is an error.",
  "mustFirst": "# mustFirst function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#first-mustfirst)\nGet the **head item** on a list. This function returns an error to the template engine if there is a problem.",
  "mustHas": "# mustHas function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#has-musthas)\nTest to see if a list has a particular element. This function returns an error to the template engine if there is a problem.",
  "mustInitial": "# mustInitial function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#initial-mustinitial)\nThe mustInitial function compliments last by returning all but the last element. This function returns an error to the template engine if there is a problem.",
  "mustLast": "# mustLast function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#last-mustlast)\nGet the **last item** on a list. This function returns an error to the template engine if there is a problem.",
  "mustMerge": "# mustMerge function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#merge-mustmerge)\nMerge two or more dictionaries into one, giving precedence to the dest dictionary. This function will return an error in case of unsuccessful merge.",
  "mustMergeOverwrite": "# mustMergeOverwrite function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#mergeoverwrite-mustmergeoverwrite)\nMerge two or more dictionaries into one, giving precedence from right to left, effectively overwriting values in the dest dictionary. This function will return an error in case of unsuccessful merge.",
  "mustPrepend": "# mustPrepend function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#prepend-mustprepend)\nPush an element onto the front of a list, creating a new list. This function returns an error to the template engine if there is a problem.",
  "mustRegexFind": "# mustRegexFind function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexfind-mustregexfind)\nReturn the first (left most) match of the regular expression in the input string. Returns an error to the template engine if there is a problem.",
  "mustRegexFindAll": "# mustRegexFindAll function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexfindall-mustregexfindall)\nReturns a slice of all matches of the regular expression in the input string. The last parameter n determines the number of substrings to return, where -1 means return all matches. Returns an error to the template engine if there is a problem.",
  "mustRegexMatch": "# mustRegexMatch function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexmatch-mustregexmatch)\nReturns true if the input string contains any match of the regular expression. Returns an error to the template engine if there is a problem.",
  "mustRegexReplaceAll": "# mustRegexReplaceAll  function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexreplaceall-mustregexreplaceall)\nReturns a copy of the input string, replacing matches of the Regexp with the replacement string replacement. Inside string replacement, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch. Returns an error to the template engine if there is a problem.",
  "mustRegexReplaceAllLiteral": "# mustRegexReplaceAllLiteral function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexreplaceallliteral-mustregexreplaceallliteral)\nReturns a copy of the input string, replacing matches of the Regexp with the replacement string replacement The replacement string is substituted directly, without using Expand. Returns an error to the template engine if there is a problem.",
  "mustRegexSplit": "# mustRegexSplit function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexsplit-mustregexsplit)\nSlices the input string into substrings separated by the expression and returns a slice of the substrings between those expression matches. The last parameter **n** determines the number of substrings to return, where -1 means return all matches. Returns an error to the template engine if there is a problem.",
  "mustRest": "# mustRest function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#rest-mustrest)\nGet the **tail of the list** (everything but the first item). This function returns an error to the template engine if there is a problem.",
  "mustReverse": "# mustReverse function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#reverse-mustreverse)\nProduce a new list with the reversed elements of the given list. This function returns an error to the template engine if there is a problem.",
  "mustSlice": "# mustSlice function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#slice-mustslice)\nTo get partial elements of a list, use slice list [n] [m]. It is equivalent of list[n:m]. This function returns an error to the template engine if there is a problem.",
  "mustToDate": "# mustToDate function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#todate-musttodate)\nConverts a string to a date. The first argument is the date layout and the second the date string. This function will return an error in case the string cannot be converted.",
  "mustToJson": "# mustToJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#tojson-musttojson)\n Convert list, slice, array, dict, or object to JSON. mustToJson will return an error in case the item cannot be encoded in JSON.",
  "mustToPrettyJson": "# mustToPrettyJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#toprettyjson-musttoprettyjson)\n Convert list, slice, array, dict, or object to indented JSON.",
  "mustToRawJson": "# mustToRawJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#torawjson-musttorawjson)\n Convert list, slice, array, dict, or object to JSON with HTML characters unescaped.",
  "mustUniq": "# mustUniq function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#uniq-mustuniq)\nGenerate a list with all of the duplicates removed. This function returns an error to the template engine if there is a problem.",
  "mustWithout": "# mustWithout function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#without-mustwithout)\nThe mustWithout function filters items out of a list. This function returns an error to the template engine if there is a problem.",
  "ne": "# ne function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ne)\nReturns the boolean **inequality** of the arguments.",
  "nindent": "# nindent function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#nindent)\nThe **nindent** function is the same as the indent function, but prepends a new line to the beginning of the string.",
  "nospace": "# nospace function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#nospace)\nRemove all whitespace from a string.",
  "not": "# not function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#not)\nReturns the boolean negation of its argument.",
  "now": "# now function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#now)\nThe **current date/time**. Use this in conjunction with other date functions.",
  "omit": "# omit function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#omit)\nThe omit function is similar to pick, except it returns a new dict with all the keys that do not match the given keys.",
  "or": "# or function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#or)\nReturns the boolean **or** of the two arguments. It returns the first non-empty argument or the last argument.",
  "pick": "# pick function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#pick)\nThe pick function selects just the given keys out of a dictionary, creating a new dict.",
  "pluck": "# pluck function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#pluck)\nThe pluck function makes it possible to give one key and multiple maps, and get a list of all of the matches.",
  "plural": "# plural function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#plural)\n**Pluralize** a string.",
  "prepend": "# prepend function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#prepend-mustprepend)\nPush an element onto the front of a list, creating a new list. This function panics if there is a problem.",
  "print": "# print function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#print)\nReturns a string from the combination of its parts.",
  "printf": "# printf function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#printf)\nReturns a string based on a formatting string and the arguments to pass to it in order.",
  "println": "# println function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#println)\nWorks the same way as print but adds a **new line** at the end.",
  "quote": "# quote function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#quote-and-squote)\nWrap a string in **double quotes**.",
  "randAlpha": "# randAlpha function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#randalphanum-randalpha-randnumeric-and-randascii)\nGenerate cryptographically secure (uses crypto/rand) random strings. Uses **a-zA-Z**.",
  "randAlphaNum": "# randAlphaNum function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#randalphanum-randalpha-randnumeric-and-randascii)\nGenerate cryptographically secure (uses crypto/rand) random strings. Uses **0-9a-zA-Z**.",
  "randAscii": "# randAscii function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#randalphanum-randalpha-randnumeric-and-randascii)\nGenerate cryptographically secure (uses crypto/rand) random strings. Uses **all printable ASCII characters**.",
  "randNumeric": "# randNumeric function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#randalphanum-randalpha-randnumeric-and-randascii)\nGenerate cryptographically secure (uses crypto/rand) random strings. Uses **0-9**.",
  "regexFind": "# regexFind function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexfind-mustregexfind)\nReturn the first (left most) match of the regular expression in the input string. Panics if there is a problem.",
  "regexFindAll": "# regexFindAll function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexfindall-mustregexfindall)\nReturns a slice of all matches of the regular expression in the input string. The last parameter n determines the number of substrings to return, where -1 means return all matches. Panics if there is a problem.",
  "regexMatch": "# regexMatch function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexmatch-mustregexmatch)\nReturns true if the input string contains any match of the regular expression. Panics if there is a problem",
  "regexReplaceAll": "# regexReplaceAll function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexreplaceall-mustregexreplaceall)\nReturns a copy of the input string, replacing matches of the Regexp with the replacement string replacement. Inside string replacement, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch. Panics if there is a problem.",
  "regexReplaceAllLiteral": "# regexReplaceAllLiteral function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexreplaceallliteral-mustregexreplaceallliteral)\nReturns a copy of the input string, replacing matches of the Regexp with the replacement string replacement The replacement string is substituted directly, without using Expand. Panics if there is a problem.",
  "regexSplit": "# regexSplit function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#regexsplit-mustregexsplit)\nSlices the input string into substrings separated by the expression and returns a slice of the substrings between those expression matches. The last parameter **n** determines the number of substrings to return, where -1 means return all matches. Panics if there is a problem.",
  "repeat": "# repeat function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#repeat)\n**Repeat** a string multiple times.",
  "replace": "# replace function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#replace)\nPerform simple string **replacement**.",
  "rest": "# rest function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#rest-mustrest)\nGet the **tail of the list** (everything but the first item). This function panics if there is a problem.",
  "reverse": "# reverse function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#reverse-mustreverse)\nProduce a new list with the reversed elements of the given list. This function panics if there is a problem.",
  "round": "# round function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#round)\nReturns a float value with the remainder rounded to the given number to digits after the decimal point.",
  "semver": "# semver function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#semver)\nThe semver function parses a string into a Semantic Version. If the parser fails, it will cause template execution to halt with an error.",
  "semverCompare": "# semverCompare function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#semvercompare)\nCompare semantic versions. It supports version ranges.",
  "seq": "# seq function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#seq)\nWorks like the **bash seq command**.",
  "set": "# set function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#set)\nUse set to add a **new key/value pair** to a dictionary.",
  "sha1sum": "# sha1sum function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#sha1sum)\nThe sha1sum function receives a string, and computes it's **SHA1 digest**.",
  "sha256sum": "# sha256sum function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#sha256sum)\nThe sha256sum function receives a string, and computes it's **SHA256 digest**.",
  "shuffle": "# shuffle function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#shuffle)\n**Shuffle** a string.",
  "slice": "# slice function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#slice-mustslice)\nTo get partial elements of a list, use slice list [n] [m]. It is equivalent of list[n:m]. This function panics if there is a problem.",
  "snakecase": "# snakecase function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#snakecase)\nConvert string from camelCase to **snake_case**.",
  "squote": "# squote function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#quote-and-squote)\nWrap a string in **single quotes**.",
  "sub": "# sub function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#sub)\nSubtract number with this function.",
  "substr": "# substr function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#substr)\nGet a **substring** from a string.",
  "swapcase": "# swapcase function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#swapcase)\n**Swap** the case of a string using a word based algorithm.",
  "ternary": "# ternary function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#ternary)\nThe **ternary** function takes two values, and a test value. If the test value is true, the first value will be returned. If the test value is empty, the second value will be returned. This is similar to the c ternary operator.",
  "title": "# title function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#title)\nConvert to **title** case.",
  "toDate": "# toDate function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#todate-musttodate)\nConverts a string to a date. The first argument is the date layout and the second the date string. If the string can't be converted, it returns the zero value.",
  "toDecimal": "# toDecimal function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#todecimal)\nConvert a unix octal to a int64. Given a unix octal permission, produce a decimal.",
  "toJson": "# toJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#tojson-musttojson)\n Convert list, slice, array, dict, or object to JSON. The toJson function encodes an item into a JSON string. If the item cannot be converted to JSON the function will return an empty string.",
  "toPrettyJson": "# toPrettyJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#toprettyjson-musttoprettyjson)\n Convert list, slice, array, dict, or object to indented JSON. The toPrettyJson function encodes an item into a pretty (indented) JSON string.",
  "toRawJson": "# toRawJson function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#torawjson-musttorawjson)\n Convert list, slice, array, dict, or object to JSON with HTML characters unescaped. The toRawJson function encodes an item into JSON string with HTML characters unescaped.",
  "toString": "# toString function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-conversion-functions)\n Convert to a string.",
  "toStrings": "# toStrings function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#tostrings)\n Convert a list, slice, or array to a list of strings. Given a list-like collection, produce a slice of strings.",
  "trim": "# trim function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#trim)\nThe **trim** function removes white space from both sides of a string.",
  "trimAll": "# trimAll function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#trimall)\nRemoves the given characters from the front and back of a string.",
  "trimPrefix": "# trimPrefix function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#trimpreffix)\nTrim just the **prefix** from a string.",
  "trimSuffix": "# trimSuffix function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#trimsuffix)\nTrim just the **suffix** from a string.",
  "trunc": "# trunc function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#trunc)\n**Truncate** a string.",
  "typeIs": "# typeIs function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-functions)\nThe typeIs function will let you verify that a value is a particular type.",
  "typeIsLike": "# typeIsLike function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-functions)\nThe typeIsLike function will let you verify that a value is a particular type. This function dereferences pointers.",
  "typeOf": "# typeOf function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#type-functions)\nThis function returns the underlying type of a value.",
  "uniq": "# uniq function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#uniq-mustuniq)\nGenerate a list with all of the duplicates removed. This function panics if there is a problem.",
  "unixEpoch": "# unixEpoch function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#unixepoch)\nReturns the seconds since the unix epoch for a time.",
  "unset": "# unset function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#unset)\nGiven a map and a key, **delete the key** from the map.",
  "until": "# until function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#until)\nThe until function builds a range of integers.",
  "untilStep": "# untilStep function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#untilsleep)\nThe untilStep function generates a list of counting integers. This function allows you to define a start, stop, and step.",
  "untitle": "# untitle function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#untitle)\nRemove title casing.",
  "upper": "# upper function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#upper)\nConvert the entire string to **uppercase**.",
  "urlJoin": "# urlJoin function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#urljoin)\nThis function joins map (produced by urlParse) to produce URL string.",
  "urlParse": "# urlParse function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#urlparse)\nThe urlPase function parses string for URL and produces dict with URL parts.",
  "urlquery": "# urlquery function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#urlquery)\nReturns the escaped version of the value passed in as an argument so that it is suitable for embedding in the query portion of a URL.",
  "uuidv4": "# uuidv4 function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#uuid-functions)\nThis function returns a new UUID of the v4 (randomly generated) type.",
  "values": "# values function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#values)\nThe values function is similar to keys, except it returns a new list with all the values of the source dict (only one dictionary is supported).",
  "without": "# without function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#without-mustwithout)\nThe without function filters items out of a list. This function panics if there is a problem.",
  "wrap": "# wrap function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#wrap)\n**Wrap** text at a given column count. Uses \\n",
  "wrapWith": "# wrapWith function [iconLink](https://helm.sh/docs/chart_template_guide/function_list/#wrapwith)\n**wrapWith** works as wrap, but lets you specify the string to wrap with."
}
