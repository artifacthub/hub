name: CI
on: [push, pull_request]

jobs:
  linter-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33
          args: --timeout 5m

  tests-database:
    runs-on: ubuntu-latest
    container:
      image: tegioz/db-tests
    services:
      postgres:
        image: tegioz/postgres-pgtap
        env:
          POSTGRES_USER: tests
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: tests
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Apply database migrations
        working-directory: ./database/migrations
        run: TERN_CONF=../../../.github/workflows/tern.conf PGPORT=${{ job.services.postgres.ports[5432] }} ./migrate.sh
      - name: Install pgtap database extension
        run: psql -h postgres -p ${{ job.services.postgres.ports[5432] }} -U tests tests -c 'create extension pgtap;'
      - name: Run database tests
        working-directory: ./database/tests
        run: pg_prove --host postgres --dbname tests --username tests --verbose schema/*.sql functions/*/*.sql

  tests-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Run backend tests
        run: go test -cover -race -v -mod=readonly ./...

  tests-frontend:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Install dependencies
        working-directory: ./web
        run: yarn install
      - name: Run prettier
        working-directory: ./web
        run: yarn format:diff
      - name: Run eslint
        working-directory: ./web
        run: yarn lint
      - name: Run frontend tests
        working-directory: ./web
        run: yarn test --watchAll=false --passWithNoTests --verbose

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Build hub
        working-directory: ./cmd/hub
        run: go build -v
      - name: Build scanner
        working-directory: ./cmd/scanner
        run: go build -v
      - name: Build tracker
        working-directory: ./cmd/tracker
        run: go build -v

  build-frontend:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Install dependencies
        working-directory: ./web
        run: yarn install
      - name: Build frontend
        working-directory: ./web
        run: yarn build

  build-docker-images:
    if: github.ref == 'refs/heads/master'
    needs:
      - linter-backend
      - tests-database
      - tests-backend
      - tests-frontend
      - build-backend
      - build-frontend
    env:
      AWS_DEFAULT_REGION: us-east-2
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Setup AWS ECR credentials
        run: $( aws ecr get-login --no-include-email )
      - name: Build hub image
        run: |
          docker build \
            -f cmd/hub/Dockerfile \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/hub:$GITHUB_SHA .
      - name: Push hub image
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/hub:$GITHUB_SHA
      - name: Build db-migrator image
        run: |
          docker build \
            -f database/migrations/Dockerfile \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/db-migrator:$GITHUB_SHA .
      - name: Push db-migrator image
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/db-migrator:$GITHUB_SHA
      - name: Build scanner image
        run: |
          docker build \
            -f cmd/scanner/Dockerfile \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/scanner:$GITHUB_SHA .
      - name: Push scanner image
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/scanner:$GITHUB_SHA
      - name: Build tracker image
        run: |
          docker build \
            -f cmd/tracker/Dockerfile \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/tracker:$GITHUB_SHA .
      - name: Push tracker image
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/tracker:$GITHUB_SHA
